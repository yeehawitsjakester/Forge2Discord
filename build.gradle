buildscript {
  repositories {
    jcenter()
    maven {
      name = "forge"
      url = "https://maven.minecraftforge.net"
    }
  }
  dependencies {
    classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
      changing = true
    }
    classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.10.0'
  }
}

apply plugin: 'forge'
apply plugin: 'java'
apply plugin: 'com.diffplug.gradle.spotless'

def mcVersion = '1.7.10'
def forgeVersion = '10.13.4.1558'
def modVersion = '3.0.6s-2'

def jdaVersion = '3.5.1'
def jdaJob = 339

def downloadDir = "${buildDir}/download/"

version = 'mc' + mcVersion + '-' + modVersion
group = "chikachi.discord"
archivesBaseName = "DiscordIntegration"

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
  main {
    java {
      srcDir 'src/main/java'
      srcDir 'src/main/resources'
      srcDir 'core/src/main/java'
    }
    resources {
      srcDir 'core/src/main/resources'
    }
  }
  test {
    java {
      srcDir 'core/src/test/java'
    }
  }
}

minecraft {
  version = mcVersion + "-" + forgeVersion + "-" + mcVersion

  if (file('../run').exists()) {
    runDir = '../run'
  } else {
    runDir = 'run'
  }

  srgExtra "PK: com/mashape/unirest chikachi/discord/repack/com/mashape/unirest"
  srgExtra "PK: com/neovisionaries/ws/client chikachi/discord/repack/com/neovisionaries/ws/client"
  srgExtra "PK: com/sun/jna chikachi/discord/repack/com/sun/jna"
  srgExtra "PK: com/vdurmont/emoji chikachi/discord/repack/com/vdurmont/emoji"
  srgExtra "PK: javax/sound chikachi/discord/repack/javax/sound"
  srgExtra "PK: javazoom chikachi/discord/repack/javazoom"
  srgExtra "PK: net/dv8tion/jda chikachi/discord/repack/net/dv8tion/jda"
  srgExtra "PK: net/sourceforge/jaad chikachi/discord/repack/net/sourceforge/jaad"
  srgExtra "PK: org/json chikachi/discord/repack/org/json"
  srgExtra "PK: org/kc7bfi/jflac chikachi/discord/repack/orgkc7bfi/jflac"
  srgExtra "PK: org/slf4j chikachi/discord/repack/slf4j"
  srgExtra "PK: org/tritonus chikachi/discord/repack/org/tritonus"
  srgExtra "PK: tomp2p/opuswrapper chikachi/discord/repack/tomp2p/opuswrapper"

  srgExtra "PK: org/apache/http chikachi/discord/repack/org/apache/http"
  srgExtra "PK: org/apache/commons/logging chikachi/discord/repack/org/apache/commons/logging"
  srgExtra "PK: org/apache/commons/codec chikachi/discord/repack/org/apache/commons/codec"
  srgExtra "PK: org/apache/commons/collections4 chikachi/discord/repack/org/apache/commons/collections4"
  srgExtra "PK: org/apache/commons/lang3 chikachi/discord/repack/org/apache/commons/lang3"

  srgExtra "PK: net/dv8tion/jda chikachi/discord/repack/net/dv8tion/jda"
  srgExtra "PK: com/vdurmont/emoji chikachi/discord/repack/com/vdurmont/emoji"
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

def printDebug(message) {
  println '[' + archivesBaseName + '] ' + message
}

configurations {
  shade
  compile.extendsFrom shade
}

class CurseForgeDependencyInfo {
  public String module, version, ext
  private String fileid

  CurseForgeDependencyInfo(String module, String version, String ext, String fileid) {
    this.module = module
    this.version = version
    this.ext = ext
    this.fileid = fileid
  }

  String GetFileId() {
    return Integer.parseInt(fileid.substring(0, 4)) + "/" + Integer.parseInt(fileid.substring(4))
  }
}

def CurseForgeDependencyDownloader = { dependencyInfo ->
  String url = "https://media.forgecdn.net/files/${dependencyInfo.GetFileId()}/${dependencyInfo.module}-${dependencyInfo.version}.${dependencyInfo.ext}"
  File file = new File("${downloadDir}/${dependencyInfo.module}-${dependencyInfo.version}.${dependencyInfo.ext}")
  file.parentFile.mkdirs()
  if (!file.exists()) {
    printDebug "Download ${url}"
    new URL(url).withInputStream { downloadStream ->
      file.withOutputStream { fileOut ->
        fileOut << downloadStream
      }
    }
  }
  files(file.absolutePath)
}

def JDADependencyDownloader = {
  String url = "https://github.com/discord-jda/JDA/releases/download/v3.5.1/JDA-3.5.1_339-withDependencies.jar"
  File file = new File("${downloadDir}/JDA-${jdaVersion}_${jdaJob}-withDependencies.jar")
  file.parentFile.mkdirs()
  if (!file.exists()) {
    printDebug "Download ${url}"
    new URL(url).withInputStream { downloadStream ->
      file.withOutputStream { fileOut ->
        fileOut << downloadStream
      }
    }
  }
  files(file.absolutePath)
}

// Dependencies on CurseForge
List<CurseForgeDependencyInfo> curseForgeDependencies = new ArrayList<CurseForgeDependencyInfo>()
//curseForgeDependencies.add(new CurseForgeDependencyInfo("Dynmap", "2.4-forge-1.7.10", "jar", "2380586"))

dependencies {
  shade JDADependencyDownloader()
  shade 'com.vdurmont:emoji-java:4.0.0'

  // JDA dependencies
  shade 'org.json:json:20160810'
  shade 'org.slf4j:slf4j-simple:1.7.25'

  for (CurseForgeDependencyInfo dependency : curseForgeDependencies) {
    if (file('../' + dependency.module).exists()) {
      printDebug 'Using local ' + dependency.module + ' project'
      compile project(':' + dependency.module)
      continue
    }
    if (file('./' + dependency.module + '.jar').exists()) {
      printDebug 'Using local ' + dependency.module + ' compiled jar'
      compile files('./' + dependency.module + '.jar')
      continue
    }
    compile CurseForgeDependencyDownloader(dependency)
  }

  // IntelliJ
  compile 'org.jetbrains:annotations:15.0'

  testCompile 'junit:junit:4.12'
  testCompile 'org.mockito:mockito-core:2.+'
}

jar {
  configurations.shade.each { dep ->
    from(project.zipTree(dep)) {
      exclude 'META-INF', 'META-INF/**'
    }
  }
  manifest {
    attributes(
      "FMLAT": 'discordintegration_at.cfg'
    )
  }
}

processResources {
  // this will ensure that this task is redone when the versions change.
  inputs.property "version", project.version
  inputs.property "mcversion", project.minecraft.version

  // replace stuff in mcmod.info, nothing else
  from(sourceSets.main.resources.srcDirs) {
    include 'mcmod.info'

    // replace version and mcversion
    expand 'version': modVersion, 'mcversion': project.minecraft.version
  }

  // copy everything else, that's not the mcmod.info
  from(sourceSets.main.resources.srcDirs) {
    exclude 'mcmod.info'
  }
}

test {
  useJUnit()
}

spotless {
  java {
    encoding 'UTF-8'
    removeUnusedImports()
    trimTrailingWhitespace()
    indentWithSpaces(4)
    endWithNewline()
  }
}

idea { module { inheritOutputDirs = true } }
